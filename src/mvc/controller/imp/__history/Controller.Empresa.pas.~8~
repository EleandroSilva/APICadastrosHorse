unit Controller.Empresa;

interface

uses
  System.SysUtils,

  System.JSON,

  Data.DB,
  FireDAC.Comp.Client,

  DataSet.Serialize,
  Horse,
  Horse.BasicAuthentication,

  Controller.Interfaces,
  Model.Imp.Controller;

type
  TControllerEmpresa = class
  private
    class procedure Create;
    class procedure Destroy; override;

    class function  Fields(aField : String) :String;
    class procedure GetAll(Req: THorseRequest; Res: THorseResponse);
    class procedure GetbyId(Req: THorseRequest; Res: THorseResponse);
    class procedure Post(Req: THorseRequest; Res: THorseResponse);
    class procedure Put(Req: THorseRequest; Res: THorseResponse);
    class procedure Delete(Req: THorseRequest; Res: THorseResponse);

    class procedure GetbyParams(aField : String; aValue : Variant);
  public
    class procedure Registry;
  end;

implementation

var
  FController : iController;
  FJSONArray  : TJSONArray;
  FBody       : TJSONValue;
  FDataSource : TDataSource;
  FTexto      : String;
  FField      : String;
  FId         : Int64;

class procedure TControllerEmpresa.Create;
begin
  FController := TController.New;
  FDataSource := TDataSource.Create(nil);
end;

class procedure TControllerEmpresa.Destroy;
begin
  FreeAndNil(FDataSource);
  inherited;
end;

class procedure TControllerEmpresa.GetAll(Req: THorseRequest; Res: THorseResponse);
begin
  Create;
   Try
     if TControllerEmpresa.Fields(Req.Query.Field('cnpj').AsString) <>'' then
       TControllerEmpresa.GetbyParams('cnpj', Req.Query.Field('cnpj').AsString)
     else
     if TControllerEmpresa.Fields(Req.Query.Field('nomeempresarial').AsString) <>'' then
       TControllerEmpresa.GetbyParams('nomeempresarial', Req.Query.Field('nomeempresarial').AsString)
     else
     if TControllerEmpresa.Fields(Req.Query.Field('nomefantasia').AsString) <>'' then
       TControllerEmpresa.GetbyParams('nomefantasia', Req.Query.Field('nomefantasia').AsString)
     else
     TControllerEmpresa.GetbyParams('', '');

     FJSONArray := FDataSource.DataSet.ToJSONArray();
     FTexto     := FJsonArray.ToString;
     Res.Send<TJSONArray>(FJSONArray);
   Finally
     Destroy;
   End;
end;

class procedure TControllerEmpresa.GetbyId(Req: THorseRequest; Res: THorseResponse);
begin
  Create;
   Try
     FId := Req.Params['id'].ToInt64;
     FController
               .Entidade
               .Empresa
               .GetbyId(FId)
               .DataSet(FDataSource);

     FJSONArray := FDataSource.DataSet.ToJSONArray();
     Res.Send<TJSONArray>(FJSONArray);
   Finally
     Destroy;
   End;
end;

class function TControllerEmpresa.Fields(aField: String): String;
begin

end;

class procedure TControllerEmpresa.GetbyParams(aField: String; aValue: Variant);
begin

end;

class procedure TControllerEmpresa.Post(Req: THorseRequest; Res: THorseResponse);
begin

end;

class procedure TControllerEmpresa.Put(Req: THorseRequest; Res: THorseResponse);
begin

end;

class procedure TControllerEmpresa.Registry;
begin

end;

class procedure TControllerEmpresa.Delete(Req: THorseRequest; Res: THorseResponse);
begin

end;

end.
