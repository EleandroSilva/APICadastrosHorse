unit Controller.Usuario;

interface

uses
  System.SysUtils,

  System.JSON,

  Data.DB,
  FireDAC.Comp.Client,

  DataSet.Serialize,
  Horse,
  Horse.BasicAuthentication,

  Controller.Interfaces,
  Model.Imp.Controller;

type
  TControllerUsuario = class
  private
    class procedure Create;
    class procedure Destroy;

    class function Fields(aField : String) :String;
    class procedure GetAll(Req: THorseRequest; Res: THorseResponse);
    class procedure GetbyId(Req: THorseRequest; Res: THorseResponse);
    class procedure Post(Req: THorseRequest; Res: THorseResponse);
    class procedure Put(Req: THorseRequest; Res: THorseResponse);
    class procedure Delete(Req: THorseRequest; Res: THorseResponse);

    class procedure GetbyParams(aField : String; aValue : Variant);

  public
    class procedure Registry;
  end;

implementation
var
  FController : iController;
  FJSONArray  : TJSONArray;
  FBody       : TJSONValue;
  FDataSource : TDataSource;
  FTexto      : String;
  FField      : String;
  FId         : Int64;


class procedure TControllerUsuario.Create;
begin
  FController := TController.New;
  FDataSource := TDataSource.Create(nil);
end;

class procedure TControllerUsuario.Destroy;
begin
  FreeAndNil(FDataSource);
end;

class function TControllerUsuario.Fields(aField : String): String;
begin
  Result := aField;
end;

class procedure TControllerUsuario.GetAll(Req: THorseRequest; Res: THorseResponse);
begin
   Create;
   Try
     if TControllerUsuario.Fields(Req.Query.Field('nome').AsString) <>'' then
       TControllerUsuario.GetbyParams('nome', Req.Query.Field('nome').AsString)
     else
     if TControllerUsuario.Fields(Req.Query.Field('sobrenome').AsString) <>'' then
       TControllerUsuario.GetbyParams('sobrenome', Req.Query.Field('sobrenome').AsString)
     else
     TControllerUsuario.GetbyParams('', '');


     FJSONArray := FDataSource.DataSet.ToJSONArray();
     FTexto     := FJsonArray.ToString;

     Res.Send<TJSONArray>(FJSONArray);
   Finally
     Destroy;
   End;
end;

class procedure TControllerUsuario.GetbyId(Req: THorseRequest; Res: THorseResponse);
begin
   Create;
   Try
     FId := Req.Params['id'].ToInt64;
     FController
               .Entidade
               .Usuario
               .GetbyId(FId)
               .DataSet(FDataSource);

     FJSONArray := FDataSource.DataSet.ToJSONArray();
     Res.Send<TJSONArray>(FJSONArray);
   Finally
     Destroy;
   End;
end;

class procedure TControllerUsuario.Post(Req: THorseRequest; Res: THorseResponse);
begin
  Create;
  try
    FBody := Req.Body<TJSONObject>;

    FController
             .Entidade
             .Usuario
             .This
               .IdEmpresa(FBody.GetValue<Integer>('idempresa'))
               .Nome(FBody.GetValue<String>('nome'))
               .SobreNome(FBody.GetValue<String>('sobrenome'))
               .EMail(FBody.GetValue<String>('email'))
               .Senha(FBody.GetValue<String>('senha'))
               .&End
             .Post
             .DataSet(FDataSource);
  finally
    Destroy;
  end;
end;

class procedure TControllerUsuario.Put(Req: THorseRequest; Res: THorseResponse);
begin
  Create;
  try
    FId   := Req.Params['id'].ToInt64;
    FBody := Req.Body<TJSONObject>;

    FController
             .Entidade
             .Usuario
             .This
               .Id(FID)
               .Nome(FBody.GetValue<String>('nome'))
               .SobreNome(FBody.GetValue<String>('sobrenome'))
               .EMail(FBody.GetValue<String>('email'))
               .Senha(FBody.GetValue<String>('senha'))
               .&End
             .Put
             .DataSet(FDataSource);
  finally
    Destroy;
  end;
end;

class procedure TControllerUsuario.Delete(Req: THorseRequest; Res: THorseResponse);
begin
  Create;
   Try
     FId := Req.Params['id'].ToInt64;
     FController
               .Entidade
               .Usuario
                 .This
                 .Id(FId)
               .&End
               .DataSet(FDataSource)
               .Delete;
   Finally
     Destroy;
   End;
end;

class procedure TControllerUsuario.GetbyParams(aField : String; aValue : Variant);
begin
  FField := aField;
  if aValue='' then
    FController
            .Entidade
             .Usuario
              .GetAll('')
              .DataSet(FDataSource)
  else
    FController
              .Entidade
               .Usuario
               .GetbyParams(aField, aValue)
               .DataSet(FDataSource);
end;

class procedure TControllerUsuario.Registry;
begin
  THorse
      .Group
      .Prefix('ess')
      .Get('/usuarios'       ,TControllerUsuario.GetAll)
      .Get('/usuarios/:id'   ,TControllerUsuario.GetbyId)
      .Post('usuarios'       ,TControllerUsuario.Post)
      .Put('usuarios/:id'    ,TControllerUsuario.Put)
      .Delete('usuarios/:id' ,TControllerUsuario.Delete);
end;

end.
