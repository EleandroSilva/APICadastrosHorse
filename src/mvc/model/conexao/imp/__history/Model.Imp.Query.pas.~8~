unit Model.Imp.Query;

interface

uses
  System.SysUtils,
  System.Classes,
  System.Types,

  Data.DB,

  FireDAC.Stan.Intf,
  FireDAC.Stan.Option,
  FireDAC.Stan.Error,
  FireDAC.UI.Intf,
  FireDAC.Phys.Intf,
  FireDAC.Stan.Def,
  FireDAC.Stan.Pool,
  FireDAC.Stan.Async,
  FireDAC.Phys,
  FireDAC.Phys.MySQL,
  FireDAC.Phys.MySQLDef,
  FireDAC.VCLUI.Wait,
  FireDAC.Comp.Client,
  FireDAC.Stan.Param,
  FireDAC.DatS,
  FireDAC.DApt.Intf,
  FireDAC.DApt,
  FireDAC.Comp.DataSet,

  Model.Conexao.Firedac.Interfaces,
  Model.Query,
  Model.Imp.Conexao.Firedac.MySQL;

type
  TQuery = class(TInterfacedObject, iQuery)
    private
      FConexao    : iConexao;
      FDQuery     : TFDQuery;
      FDataSource : TDataSource;
    public
      constructor Create;
      destructor Destroy; override;
      class function New : iQuery;

      function DataSet(aDataSource : TDataSource): iQuery; overload;
      function DataSet : TDataSet; overload;
      function Params(aParams : String; Value : Variant) : iQuery; overload;
      function Params(aParams : String): Variant; overload;
      function SQL(aValue : String) : iQuery; overload;
      function ExecSQL              : iQuery;
      function Clear                : iQuery;
      function Close                : iQuery;
      function Open                 : iQuery;
  end;

implementation

{ TQuery }

constructor TQuery.Create;
begin
  FConexao := TModelConexaoFiredacMySQL.New;
  FDQuery  := TFDQuery.Create(nil);
  FDQuery.Connection := FConexao.Conexao;
end;

function TQuery.DataSet(aDataSource: TDataSource): iQuery;
begin
  Result := Self;
  aDataSource := FDQuery;
end;

function TQuery.DataSet: TDataSet;
begin
  Result := FDQuery;
end;


destructor TQuery.Destroy;
begin
  FreeAndNil(FDQuery);
  inherited;
end;

function TQuery.ExecSQL: iQuery;
begin

end;

class function TQuery.New: iQuery;
begin
  Result := Self.Create;
end;

function TQuery.Clear: iQuery;
begin

end;

function TQuery.Close: iQuery;
begin
  Result := Self;
  //FDQuery.
end;

function TQuery.Open: iQuery;
begin

end;

function TQuery.Params(aParams: String): Variant;
begin

end;

function TQuery.Params(aParams: String; Value: Variant): iQuery;
begin

end;

function TQuery.SQL(aValue: String): iQuery;
begin

end;

end.
