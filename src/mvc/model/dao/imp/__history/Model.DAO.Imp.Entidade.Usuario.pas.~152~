{*******************************************************}
{                                                       }
{                      ES Sistemas                      }
{                                                       }
{ Empresas de Sistemas 2003-2023 www.bemoreweb.com.br   }
{                     (17)98169-5336                    }
{                                                       }
{*******************************************************}
unit Model.DAO.Imp.Entidade.Usuario;

interface

uses
  System.SysUtils,
  System.JSON,

  DataSet.Serialize,
  Data.DB,

  Uteis.Tratar.Mensagens,

  Model.DAO.Entidade.Interfaces,
  Model.Conexao.Firedac.Interfaces,
  Model.Query,
  Model.Imp.Conexao.Firedac.MySQL,
  Model.Imp.Query,
  Model.Entidade.Usuario.Interfaces,
  Model.Imp.Entidade.Usuario;

type
  TDAOUsuario = class(TInterfacedObject, iDAOEntidade<iEntidadeUsuario>)
    private
      FUsuario : iEntidadeUsuario;
      FConexao : iConexao;
      FDataSet : TDataSet;
      FQuery   : iQuery;
      FTratarMSG : TTratarMensagens;
   const
      FSQL=('select * from usuario');
    public
      constructor Create;
      destructor Destroy; override;
      class function New : iDAOEntidade<iEntidadeUsuario>;

      function DataSet(aDataSource : TDataSource)  : iDAOEntidade<iEntidadeUsuario>; overload;
      function DataSet                             : TDataSet;                       overload;
      function GetAll(aValue : String)             : iDAOEntidade<iEntidadeUsuario>; overload;
      function GetAll                              : TJSONArray;                     overload;
      function GetbyId(aId : Variant)              : iDAOEntidade<iEntidadeUsuario>;
      function GetbyParams(aField : String; aValue : Variant) : iDAOEntidade<iEntidadeUsuario>;
      function Post                                : iDAOEntidade<iEntidadeUsuario>;
      function Put                                 : iDAOEntidade<iEntidadeUsuario>;
      function Delete                              : iDAOEntidade<iEntidadeUsuario>;

      function This : iEntidadeUsuario;
  end;

implementation

{ TDAOUsuario }

constructor TDAOUsuario.Create;
begin
  FUsuario := TEntidadeUsuario.New(Self);
  FConexao := TModelConexaoFiredacMySQL.New;
  FQuery   := TQuery.New;
end;

class function TDAOUsuario.New: iDAOEntidade<iEntidadeUsuario>;
begin
  Result := Self.Create;
end;

function TDAOUsuario.This: iEntidadeUsuario;
begin
  Result := FUsuario;
end;

destructor TDAOUsuario.Destroy;
begin
  inherited;
end;

function TDAOUsuario.DataSet(aDataSource: TDataSource): iDAOEntidade<iEntidadeUsuario>;
begin
  Result := Self;
  if not Assigned(FDataset) then
    aDataSource.DataSet := FQuery.DataSet
  else
    aDataSource.DataSet := FDataSet;
end;

function TDAOUsuario.DataSet: TDataSet;
begin
  Result := FDataSet;
end;

function TDAOUsuario.GetAll(aValue : String): iDAOEntidade<iEntidadeUsuario>;
begin
  Result := Self;
  try
    try
      FDataSet := FQuery
                 .SQL(FSQL)
                 .Open
                 .DataSet;
    except
     raise Exception.Create('Erro: '+FTratarMSG.MSGerroGet);
    end;
  finally
   if Assigned(FDataset) and FDataSet.IsEmpty then
    raise Exception.Create('Erro: '+FTratarMSG.MSGnotGet);
  end;
end;

function TDAOUsuario.GetAll: TJSONArray;
var
  lDataSet : TDataSet;
begin
  try
    try
      lDataSet := FQuery
               .SQL(FSQL)
               .Open
                .DataSet;
    except
      raise Exception.Create('Erro: '+FTratarMSG.MSGerroGet);
    end;
  finally
    if Assigned(FDataset) and FDataSet.IsEmpty then
      FTratarMSG.MSGnotGet else

    Result := LDataSet.ToJSONArray();
  end;
end;

function TDAOUsuario.GetbyId(aId: Variant): iDAOEntidade<iEntidadeUsuario>;
begin
  Result := Self;
  try
    try
      FDataSet := FQuery
                    .SQL(FSQL+' where Id=:Id')
                      .Params('Id', aId)
                      .Open
                    .DataSet;
    except
      raise Exception.Create(FTratarMSG.MSGerroGet);
    end;
  finally
    if Assigned(FDataset) and FDataSet.IsEmpty then
        FTratarMSG.MSGnotGet;
  end;
end;

function TDAOUsuario.GetbyParams(aField : String; aValue : Variant) : iDAOEntidade<iEntidadeUsuario>;
begin
  Result := Self;
  try
   try
     FDataSet := FQuery
                   .SQL(FSQL+' where lower('+aField+') like lower(::'+aField+')')
                     .Params(aField, aValue)
                     .Open
                   .DataSet;
   except
     Exception.Create(FTratarMSG.MSGerroGet);
   end;
  finally
    if Assigned(FDataset) and FDataSet.IsEmpty then
      raise Exception.Create(FTratarMSG.MSGnotGet);
  end;
end;

function TDAOUsuario.Post: iDAOEntidade<iEntidadeUsuario>;
const
  LSQL=('insert into usuario('+
                             'idempresa, '+
                             'nome, '+
                             'sobrenome, '+
                             'email, '+
                             'senha '+
                           ')'+
                             ' values '+
                           '('+
                             ':idempresa, '+
                             ':nome, '+
                             ':sobrenome, '+
                             ':email, '+
                             ':senha '+
                            ')'
       );
begin
  Result := Self;

  FConexao.StartTransaction;
  try
    try
      FQuery
        .SQL(LSQL)
          .Params('idempresa' , FUsuario.IdEmpresa)
          .Params('nome'      , FUsuario.Nome)
          .Params('sobrenome' , FUsuario.SobreNome)
          .Params('email'     , FUsuario.EMail)
          .Params('senha'     , FUsuario.Senha)
        .ExecSQL;
    except
      FConexao.Rollback;
      raise Exception.Create(FTratarMSG.MSGerroPost);
    end;
  finally
   FConexao.Commit;
   FDataSet := FQuery
                    .SQL('select LAST_INSERT_ID ()').Open.DataSet;
   FTratarMSG.MSGokPost;
  end;
end;

function TDAOUsuario.Put: iDAOEntidade<iEntidadeUsuario>;
const
  LSQL=('update usuario set '+
        'nome=:nome, '+
        'sobrenome=:sobrenome, '+
        'email=:email, '+
        'senha=:senha '+
        'where id=:id '
       );
begin
  Result := Self;

  FConexao.StartTransaction;
  try
    try
      FQuery
        .SQL(LSQL)
          .Params('id'        , FUsuario.Id)
          .Params('nome'      , FUsuario.Nome)
          .Params('sobrenome' , FUsuario.SobreNome)
          .Params('email'     , FUsuario.EMail)
          .Params('senha'     , FUsuario.Senha)
        .ExecSQL;
    except
        FConexao.Rollback;
      raise Exception.Create(FTratarMSG.MSGerroPut);
    end;
  finally
    FConexao.Commit;
    FTratarMSG.MSGokPut;
  end;
end;

function TDAOUsuario.Delete: iDAOEntidade<iEntidadeUsuario>;
const
  LSQL=('delete from usuario where id=:id ');
begin
  Result := self;
  FConexao.StartTransaction;
  try
    try
      FQuery.SQL(LSQL)
               .Params('id', FUsuario.Id)
            .ExecSQL;
    except
      FConexao.Rollback;
      raise Exception.Create(FTratarMSG.MSGerroDelete);
    end;
  finally
    FConexao.Commit;
    FTratarMSG.MSGokDelete;
  end;
end;

end.
